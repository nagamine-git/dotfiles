# Created by newuser for 5.9

# 基本的な環境変数
export LANG=ja_JP.UTF-8
export LC_ALL=ja_JP.UTF-8
export EDITOR=nvim

# PATHの設定 - 一箇所にまとめてシンプル化
export PATH="$HOME/.local/bin:$HOME/.cargo/bin:$HOME/.local/share/nvim-linux-x86_64/bin:$PATH"
export PATH="$PATH:$HOME/.local/share/mise/installs/python/*/bin"
export GOPATH="$HOME/go"
export PATH="$GOPATH/bin:$PATH"
export PATH="$PATH:/snap/bin"
export SSH_AUTH_SOCK="$HOME/.1password/agent.sock"
# export MISE_VERBOSE=1

# 補完
autoload -Uz compinit
compinit -i

# 補完の設定
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}' # 大文字小文字を区別しない
zstyle ':completion:*' menu select # 補完メニューを有効化
zstyle ':completion:*' verbose yes # 補完の詳細を表示

# プラグイン管理
eval "$(starship init zsh)"
# 通常のシェル: フルアクティベート
eval "$(mise activate zsh)"
eval "$(sheldon source)"
eval "$(atuin init zsh)"

# コマンド履歴
HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000
setopt hist_expire_dups_first
setopt hist_verify
setopt share_history
setopt extended_history

# alias
alias vim='nvim'

# ghqでクローンしたリポジトリへ簡単に移動するための関数
cgh() { 
    local dir
    dir=$(ghq list | fzf --no-multi --exit-0 --query="$*" --preview="ls -FA1 $(ghq root)/{}")
    [ -n "$dir" ] && cd "$(ghq root)/$dir" || return 
}

# Cursorの実行
code() {
    # 既存のCursorプロセスをチェック
    if pgrep -f "cursor.*--no-sandbox" > /dev/null; then
        echo "Cursor is already running. Opening new window..."
        command /usr/bin/cursor "$@" --reuse-window
    else
        echo "Cursor is not running. Starting new instance..."
        command /usr/bin/cursor "$@" --no-sandbox --enable-features=UseOzonePlatform --ozone-platform=wayland --enable-wayland-ime --wayland-text-input-version=3 --password-store=basic > /dev/null 2>&1 &
        disown
    fi
}

# ls系コマンドの統合
alias ls='eza --icons --color=always'
alias ll='ls -l'
alias la='ls -la'
alias l='ls -l'
alias tree='ls --tree --git-ignore'
alias lmt='eza --tree --git-ignore --icons=never --classify'
alias zj='zellij'
alias supabase='npx supabase'
alias cursor='code'

# Distroboxコンテナ準備の共通処理
_ensure_kali_running() {
    # Dockerサービスが起動しているか確認
    if ! systemctl is-active --quiet docker; then
        echo "→ Starting Docker service..."
        sudo systemctl start docker
    fi
    
    # Kaliコンテナが存在するか確認
    if ! distrobox list | grep -q "^kali"; then
        echo "→ Creating new Kali container (kali)..."
        distrobox create --name kali --image docker.io/kalilinux/kali-rolling:latest --home ~/distrobox/kali --additional-flags "--privileged"
    fi
    
    return 0
}

# Kaliコンテナ内でコマンドを実行するヘルパー関数
_distrobox_kali_exec() {
    _ensure_kali_running || return 1
    
    # distroboxのenterコマンドでbashコマンドを実行
    distrobox enter kali -- bash -c "$@"
    return $?
}

# Torを有効にしてKaliコンテナに入る（proxychains4使用）
k() {
    _ensure_kali_running || return 1
    
    echo "→ Entering Kali container with Tor (proxychains4)..."
    distrobox enter kali -- bash -c '
        # Torサービス開始
        sudo systemctl start tor >/dev/null 2>&1
        echo "Use: proxychains4 <command> for Tor routing"
        exec /bin/bash --login
    '
}

# 通常ネットワークモードでKaliコンテナに入る
k_pub() {
    _ensure_kali_running || return 1
    
    echo "→ Entering Kali container with normal network..."
    distrobox enter kali -- bash -c '
        exec /bin/bash --login
    '
}

alias pbcopy='wl-copy'
alias b='~/.local/bin/biz_start.sh '
