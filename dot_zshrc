# Created by newuser for 5.9

# 基本的な環境変数
export LANG=ja_JP.UTF-8
export LC_ALL=ja_JP.UTF-8
export EDITOR=nvim

# PATHの設定 - 一箇所にまとめてシンプル化
export PATH="$HOME/.local/bin:$HOME/.cargo/bin:$HOME/.local/share/nvim-linux-x86_64/bin:$PATH"
export PATH="$PATH:$HOME/.local/share/mise/installs/python/*/bin"
export GOPATH="$HOME/go"
export PATH="$GOPATH/bin:$PATH"
export PATH="$PATH:/snap/bin"

# atuin
source $HOME/.atuin/bin/env

# 補完システムを有効化（sheldonより先に実行）
autoload -Uz compinit
compinit -i

# 補完の設定
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}' # 大文字小文字を区別しない
zstyle ':completion:*' menu select # 補完メニューを有効化
zstyle ':completion:*' verbose yes # 補完の詳細を表示

# プラグイン管理
eval "$(sheldon source)"

# ヒストリー設定
HISTFILE=~/.zsh_history
HISTSIZE=1000
SAVEHIST=2000
setopt hist_expire_dups_first
setopt hist_verify
setopt share_history
setopt extended_history
# エイリアス
alias vim='nvim'

# ghqでクローンしたリポジトリへ簡単に移動するための関数
cgh() { 
    local dir
    dir=$(ghq list | fzf --no-multi --exit-0 --query="$*" --preview="ls -FA1 $(ghq root)/{}")
    [ -n "$dir" ] && cd "$(ghq root)/$dir" || return 
}

# シンプル化したCursor検出・実行関数
cursor_path() {
    local target_path="${1:-.}"
    local cursor_dir=$(find "$HOME/Applications/extracted" -maxdepth 1 -name "Cursor-*" -type d | sort -V | tail -n 1)
    
    if [ -n "$cursor_dir" ] && [ -d "$cursor_dir" ]; then
        nohup env CURSOR_APPIMAGE=1 "$cursor_dir/AppRun" --no-sandbox "$target_path" > /dev/null 2>&1 &
        disown
    else
        echo "Cursorが見つかりません"
    fi
}

alias cursor='cursor_path'

# ls系コマンドの統合
alias ls='eza --icons --color=always'
alias ll='ls -l'
alias la='ls -la'
alias l='ls -l'
alias tree='ls --tree --git-ignore'
alias lmt='eza --tree --git-ignore --icons=never --classify'
alias supabase='npx supabase'

# LXDコンテナ準備の共通処理
_ensure_kali_running() {
  local st
  st=$(lxc info kali 2>/dev/null | grep '^Status:' | awk '{print $2}')

  if [[ -z "$st" ]]; then
    echo "→ Launching new Kali container (kali)..."
    lxc launch images:kali/rolling kali && lxc start kali
  elif [[ "$st" != "RUNNING" ]]; then
    echo "→ Starting Kali container (kali)..."
    lxc start kali
  fi
  return 0
}

# Kaliコンテナ内でコマンドを実行するヘルパー関数
_lxc_kali_exec() {
  _ensure_kali_running || return 1

  local container_display_num=":0"
  local xauth_cookie
  # ホストOSからX11認証クッキーを取得 (最初のMIT-MAGIC-COOKIE-1エントリのクッキー部分)
  xauth_cookie=$(xauth list "$DISPLAY" 2>/dev/null | grep 'MIT-MAGIC-COOKIE-1' | head -n 1 | awk '{print $3}')

  local x_setup_commands="export DISPLAY='$container_display_num';"
  if [[ -n "$xauth_cookie" ]]; then
    # コンテナ内で .Xauthority ファイルを準備 (クリーンアップと作成)
    x_setup_commands+="rm -rf /root/.Xauthority;"
    x_setup_commands+="touch /root/.Xauthority;"
    x_setup_commands+="chmod 600 /root/.Xauthority;"
    x_setup_commands+="xauth add :0 MIT-MAGIC-COOKIE-1 $xauth_cookie;"
  else
    echo "警告: ホストOSのX11認証クッキーを取得できませんでした。コンテナ内GUIアプリは動作しない可能性があります。" >&2
  fi

  # ユーザー指定のコマンドの前にX11セットアップコマンドを挿入して実行
  lxc exec kali -- bash -c "$x_setup_commands $@"
  return $? # lxc exec の終了ステータスを返す
}

# Torを有効にしてKaliコンテナに入る
k() {
  _lxc_kali_exec '
    sudo anonsurf start;
    sudo sysctl -w net.ipv6.conf.all.disable_ipv6=0 > /dev/null;
    exec /bin/bash --login
  '
}

# 通常ネットワークモードでKaliコンテナに入る
kpub() {
  _lxc_kali_exec '
    sudo anonsurf stop >/dev/null 2>&1;
    # ネットワークサービスを再起動して通常接続を回復
    (sudo systemctl restart networking.service || sudo systemctl restart NetworkManager.service) >/dev/null 2>&1;
    sudo sysctl -w net.ipv6.conf.all.disable_ipv6=0 > /dev/null;
    exec /bin/bash --login
  '
}

alias b='bizstart.sh'